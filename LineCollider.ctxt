#BlueJ class context
comment0.target=LineCollider
comment0.text=\r\n\ Linien-Collider\ zwischen\ zwei\ Punkten\r\n\ \r\n\ @author\ Lasse\ Huber-Saffer\r\n\ @version\ 24.12.2021\r\n
comment1.params=pos1\ pos2\ layer
comment1.target=LineCollider(Vector2,\ Vector2,\ PhysicsLayer)
comment1.text=\r\n\ Konstruktor\ mit\ zwei\ Punkten\r\n\ @param\ pos1\ erster\ Punkt\ der\ Linie\r\n\ @param\ pos2\ zweiter\ Punkt\ der\ Linie\r\n\ @param\ layer\ Physik-Ebene\ auf\ der\ dieser\ Collider\ agiert\r\n
comment10.params=
comment10.target=ICollisionListener\ getListener()
comment10.text=\r\n\ @see\ ICollider\#getListener()\r\n
comment11.params=listener
comment11.target=void\ setListener(ICollisionListener)
comment11.text=\r\n\ @see\ ICollider\#setListener()\r\n
comment12.params=
comment12.target=PhysicsLayer\ getLayer()
comment12.text=\r\n\ @see\ ICollider\#getLayer()\r\n
comment13.params=layer
comment13.target=void\ setLayer(PhysicsLayer)
comment13.text=\r\n\ @see\ ICollider\#setLayer()\r\n
comment14.params=
comment14.target=Vector2\ getFirstPoint()
comment14.text=\r\n\ Gibt\ die\ Position\ des\ ersten\ Punktes\ der\ Linie\ zur\u00FCck\r\n\ @return\ Position\ des\ ersten\ Punktes\ der\ Linie\r\n
comment15.params=
comment15.target=Vector2\ getSecondPoint()
comment15.text=\r\n\ Gibt\ die\ Position\ des\ zweiten\ Punktes\ der\ Linie\ zur\u00FCck\r\n\ @return\ Position\ des\ zweiten\ Punktes\ der\ Linie\r\n
comment16.params=pos
comment16.target=void\ setFirstPoint(Vector2)
comment16.text=\r\n\ Setzt\ die\ Position\ des\ ersten\ Punktes\ der\ Linie\r\n\ @param\ Position\ des\ ersten\ Punktes\ der\ Linie\r\n
comment17.params=pos
comment17.target=void\ setSecondPoint(Vector2)
comment17.text=\r\n\ Setzt\ die\ Position\ des\ zweiten\ Punktes\ der\ Linie\r\n\ @param\ Position\ des\ zweiten\ Punktes\ der\ Linie\r\n
comment2.params=pos\ dir\ length\ layer
comment2.target=LineCollider(Vector2,\ Vector2,\ double,\ PhysicsLayer)
comment2.text=\r\n\ Konstruktor\ mit\ Punkt,\ Richtungsvektor\ und\ L\u00E4nge\r\n\ @param\ pos\ Startpunkt\r\n\ @param\ dir\ Richtungsvektor\r\n\ @param\ length\ L\u00E4nge\ des\ Linie\r\n\ @param\ layer\ Physik-Eben\ auf\ der\ dieser\ Collider\ agiert\r\n
comment3.params=other
comment3.target=boolean\ intersects(ICollider)
comment3.text=\r\n\ @see\ ICollider\#intersect()\r\n
comment4.params=a\ b\ c\ d
comment4.target=double\ computeH(Vector2,\ Vector2,\ Vector2,\ Vector2)
comment4.text=\r\n\ Berechnet\ den\ Skalar\ h\ gem\u00E4\u00DF\ des\ Algorithmus\ nach\ https\://stackoverflow.com/a/563275/13332329\r\n\ @param\ a\ 1.\ Punkt\ der\ ersten\ Linie\r\n\ @param\ b\ 2.\ Punkt\ der\ ersten\ Linie\r\n\ @param\ c\ 1.\ Punkt\ der\ zweiten\ Linie\r\n\ @param\ d\ 2.\ Punkt\ der\ zweiten\ Linie\r\n\ @return\ h-Wert\r\n
comment5.params=other
comment5.target=boolean\ detectCollision(ICollider)
comment5.text=\r\n\ @see\ ICollider\#detectCollision()\r\n
comment6.params=otherLine
comment6.target=Vector2\ getLineIntersection(LineCollider)
comment6.text=\r\n\ Berechnet\ den\ Schnittpunkt\ dieses\ LineColliders\ mit\ einem\ anderen\r\n\ @param\ otherLine\ zweiter\ LineCollider,\ zu\ dem\ der\ Schnittpunkt\ berechnet\ werden\ soll\r\n\ @return\ null,\ wenn\ es\ keinen\ Schnittpunkt\ gibt,\ sonst\ den\ Schnittpunkt\r\n
comment7.params=otherCircle
comment7.target=LineCircleIntersection\ getCircleIntersection(CircleCollider)
comment7.text=\r\n\ Gibt\ den\ Schnitt\ dieses\ LineColliders\ mit\ einem\ Kreis\ zur\u00FCck\r\n\ @param\ otherCircle\ Kreis,\ mit\ dem\ der\ Schnitt\ berechnet\ werden\ soll\r\n\ @return\ Ergebnis\ des\ Schnitts\r\n
comment8.params=point
comment8.target=Vector2\ getClosestPoint(Vector2)
comment8.text=\r\n\ Gibt\ Punkt\ auf\ der\ Linie\ zur\u00FCck,\ der\ den\ geringsten\ Abstand\ zu\ einem\ anderen\ gegebenen\ Punkt\ hat\r\n\ @param\ point\ zweiter\ Punkt\r\n\ @return\ Punkt\ auf\ der\ Linie,\ der\ dem\ gegebenen\ Punkt\ am\ n\u00E4chsten\ ist.\r\n
comment9.params=point
comment9.target=double\ getPointDistance(Vector2)
comment9.text=\r\n\ Gibt\ den\ Abstand\ eines\ Punktes\ zum\ LineCollider\ zur\u00FCck\r\n\ @param\ point\ Punkt,\ dessen\ Abstand\ zur\ Linie\ berechnet\ werden\ soll\r\n\ @return\ Abstand\ des\ Punktes\ zur\ Linie\ (>\=\ 0.0)\r\n
numComments=18
