#BlueJ class context
comment0.target=Drone
comment0.text=\r\n\ Drohne,\ der\ sich\ zum\ Spieler\ ausrichtet,\ ihn\ verfolgt\ und\ beschie\u00DFt\r\n\ \r\n\ @author\ Lasse\ Huber-Saffer\r\n\ @version\ 03.01.2022\r\n
comment1.params=position\ active\ room\ entityMeshes\ particleMeshes\ soundEngine
comment1.target=Drone(maths.Vector3,\ boolean,\ Room,\ java.util.HashMap,\ java.util.HashMap,\ core.SoundEngine)
comment1.text=\r\n\ Konstruktor\ f\u00FCr\ Drohne\ mit\ Position\ und\ Meshes\r\n\ @param\ position\ Position\r\n\ @param\ active\ Ob\ das\ Drohne\ aktiv\ sein\ soll\r\n\ @param\ room\ umgebender\ Raum\r\n\ @param\ entityMeshes\ Register,\ aus\ dem\ die\ Entity-Meshes\ bezogen\ werden\r\n\ @param\ particleMeshes\ Register,\ aus\ dem\ die\ Particle-Meshes\ bezogen\ werden\r\n\ @param\ soundEngine\ Sound\ Engine,\ aus\ der\ die\ Sounds\ der\ Entity\ bezogen\ werden\r\n
comment10.params=scale
comment10.target=void\ scale(maths.Vector3)
comment10.text=\r\n\ @see\ IDynamicGameObject\#scale()\r\n
comment11.params=
comment11.target=maths.Matrix4\ getModelMatrix()
comment11.text=\r\n\ Generiert\ die\ Modelmatrix\ aller\ Transformationen\ auf\ dem\ Gesch\u00FCtzturm\r\n\ @return\ Modelmatrix\r\n
comment12.params=
comment12.target=physics.CircleCollider\ getCollider()
comment12.text=\r\n\ Gibt\ den\ CircleCollider\ des\ Spielers\ als\ Referenz\ zur\u00FCck\r\n\ @return\ CircleCollider\ des\ Spielers\r\n
comment13.params=
comment13.target=boolean\ isAlive()
comment13.text=\r\n\ @see\ ILivingEntity\#isAlive()\r\n
comment14.params=
comment14.target=int\ getHealth()
comment14.text=\r\n\ @see\ ILivingEntity\#getHealth()\r\n
comment15.params=
comment15.target=int\ getMaxHealth()
comment15.text=\r\n\ @see\ ILivingEntity\#getMaxHealth()\r\n
comment16.params=
comment16.target=core.Mesh\ getMesh()
comment16.text=\r\n\ Gibt\ eine\ Kopie\ des\ Meshs\ (3D-Modell)\ zur\u00FCck\r\n\ @return\ Mesh\ (3D-Modell)\r\n
comment17.params=
comment17.target=core.Mesh\ getMeshRef()
comment17.text=\r\n\ Gibt\ eine\ Referenz\ auf\ das\ Mesh\ (3D-Modell)\ zur\u00FCck\r\n\ @return\ Mesh\ (3D-Modell)\r\n
comment18.params=
comment18.target=maths.Vector3\ getPosition()
comment18.text=\r\n\ @see\ IGameObject\#getPosition()\r\n
comment19.params=
comment19.target=maths.Vector3\ getRotation()
comment19.text=\r\n\ @see\ IGameObject\#getRotation()\r\n
comment2.params=deltaTime\ runTime\ cameraPosition
comment2.target=void\ update(double,\ double,\ maths.Vector3)
comment2.text=\r\n\ @see\ IGameObject\#update()\r\n
comment20.params=
comment20.target=maths.Vector3\ getScale()
comment20.text=\r\n\ @see\ IGameObject\#getScale()\r\n
comment21.params=
comment21.target=core.TurtleColor\ getColor()
comment21.text=\r\n\ @see\ IGameObject\#getColor()\r\n
comment22.params=amount
comment22.target=void\ setHealth(int)
comment22.text=\r\n\ @see\ ILivingEntity\#setHealth()\r\n
comment23.params=amount
comment23.target=void\ setMaxHealth(int)
comment23.text=\r\n\ @see\ ILivingEntity\#setMaxHealth()\r\n
comment24.params=amount\ source
comment24.target=void\ damage(int,\ java.lang.String)
comment24.text=\r\n\ @see\ ILivingEntity\#damage()\r\n
comment25.params=amount\ source
comment25.target=void\ heal(int,\ java.lang.String)
comment25.text=\r\n\ @see\ ILivingEntity\#heal()\r\n
comment26.params=color
comment26.target=void\ setColor(core.TurtleColor)
comment26.text=\r\n\ @see\ IGameObject\#setColor()\r\n
comment27.params=mesh
comment27.target=void\ setMesh(core.Mesh)
comment27.text=\r\n\ Setzt\ das\ Mesh\ (3D-Modell)\r\n\ @param\ mesh\ Mesh\ (3D-Modell)\r\n
comment28.params=position
comment28.target=void\ setPosition(maths.Vector3)
comment28.text=\r\n\ @see\ IDynamicGameObject\#setPosition()\r\n
comment29.params=rotation
comment29.target=void\ setRotation(maths.Vector3)
comment29.text=\r\n\ {@inheritDoc},\ Rotation\ wird\ wie\ folgt\ interpretiert\:\ (pitch,\ yaw,\ *)\r\n
comment3.params=tileValue
comment3.target=boolean\ evaluate(int)
comment30.params=scale
comment30.target=void\ setScale(maths.Vector3)
comment30.text=\r\n\ @see\ IDynamicGameObject\#setScale()\r\n
comment4.params=renderer\ camera
comment4.target=void\ draw(core.Renderer,\ core.Camera)
comment4.text=\r\n\ @see\ IGameObject\#draw()\r\n
comment5.params=self\ other
comment5.target=void\ onCollision(physics.ICollider,\ physics.ICollider)
comment5.text=\r\n\ @see\ ICollisionListener\#onCollision()\r\n
comment6.params=self\ other
comment6.target=void\ onResolution(physics.ICollider,\ physics.ICollider)
comment6.text=\r\n\ @see\ ICollisionListener\#onResolution()\r\n
comment7.params=
comment7.target=maths.Vector3\ getCurrentMuzzlePosition()
comment7.text=\r\n\ Gibt\ die\ transformierte\ Position\ der\ Laufm\u00FCndung\ im\ World\ Space\ zur\u00FCck\r\n\ @return\ Position\ der\ Laufm\u00FCndung\ im\ World\ Space\r\n
comment8.params=delta
comment8.target=void\ move(maths.Vector3)
comment8.text=\r\n\ @see\ IDynamicGameObject\#move()\r\n
comment9.params=rotation
comment9.target=void\ rotate(maths.Vector3)
comment9.text=\r\n\ @see\ IDynamicGameObject\#rotate()\r\n
numComments=31
