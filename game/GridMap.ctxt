#BlueJ class context
comment0.target=GridMap
comment0.text=\r\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ GridMap.\r\n\ \r\n\ @author\ Lasse\ Huber-Saffer\ \r\n\ @version\ 03.01.2022\r\n
comment1.params=tileLayer\ functionLayer
comment1.target=GridMap(java.util.ArrayList,\ java.util.ArrayList)
comment1.text=\r\n\ Konstruktor\ f\u00FCr\ Objekte\ der\ Klasse\ GridMap\r\n\ @param\ tileLayer\ zweidimensionale\ Liste\ der\ Tile-Werte\r\n\ @param\ functionLayer\ zweidimensionale\ Liste\ der\ funktionalen\ Tiles\r\n
comment10.params=roomID\ completedRooms\ cameraPosition
comment10.target=void\ reorderConnectedRooms(int,\ java.util.HashSet,\ maths.Vector3)
comment10.text=\r\n\ Updated\ den\ Draw\ Order\ f\u00FCr\ einen\ gegebenen\ Raum\ und\ alle\ damit\ verkn\u00FCpften\ R\u00E4ume\r\n\ @param\ roomID\ ID\ des\ Raums\ in\ der\ GridMap-Raumliste\r\n\ @param\ completedRooms\ HashSet\ der\ bereits\ gezeichneten\ RaumIDs\r\n\ @param\ cameraPosition\ Position\ der\ Kamera,\ die\ als\ Bezugspunkt\ der\ LOD-Berechnung\ genutzt\ wird\r\n
comment11.params=tileProviders\ colliderProviders\ entityMeshes\ particleMeshes\ soundEngine
comment11.target=void\ populate(java.util.HashMap,\ java.util.HashMap,\ java.util.HashMap,\ java.util.HashMap,\ core.SoundEngine)
comment11.text=\r\n\ Verarbeitet\ die\ Tile-Werte\ und\ erstellt\ die\ spielbare\ Map.\r\n\ @param\ tileProviders\ Hashmap\ der\ TileProvider.\ Der\ Key\ entspricht\ der\ Tile-ID.\r\n\ @param\ colliderProviders\ Hashmap\ der\ ColliderProvider.\ Der\ Key\ entspricht\ der\ Tile-ID.\r\n\ @param\ entityMeshes\ Register,\ aus\ dem\ die\ Entity-Meshes\ bezogen\ werden\r\n\ @param\ particleMeshes\ Register,\ aus\ dem\ die\ Particle-Meshes\ bezogen\ werden\r\n\ @param\ soundEngine\ Sound\ Engine\r\n
comment12.params=door
comment12.target=void\ connectDoor(IDoorGameObject)
comment12.text=\r\n\ Richtet\ die\ Raum-T\u00FCr-Verbindungen\ eines\ T\u00FCrobjekts\ f\u00FCr\ diese\ Map\ ein\r\n\ @param\ door\ T\u00FCr,\ die\ verbunden\ werden\ soll\r\n
comment13.params=source
comment13.target=Room\ floodFillFromSource(maths.Vector2i)
comment13.text=\r\n\ F\u00FCllt\ von\ einer\ Quell-Tile\ aus\ eine\ Raumfl\u00E4che\ auf\r\n\ @param\ source\ Quell-Tile\r\n\ @return\ entstandener\ Raum\r\n
comment14.params=source\ room
comment14.target=void\ floodFillStep(maths.Vector2i,\ Room)
comment14.text=\r\n\ Einzelschritt\ des\ Floodfill-Algorithmus\r\n\ @param\ source\ Quell-Tile\ dieses\ Schrittes\r\n\ @param\ room\ bisheriger\ Raum\r\n
comment15.params=dx\ dz\ source\ room
comment15.target=void\ floodFillDirection(int,\ int,\ maths.Vector2i,\ Room)
comment15.text=\r\n\ Einzelner\ direktionaler\ Schritt\ des\ Floodfill-Algorithmus\r\n\ @param\ dx\ x-Verschiebung\ von\ der\ Quell-Tile\r\n\ @param\ dz\ z-Verschiebung\ von\ der\ Quell-Tile\r\n\ @param\ source\ Quell-Tile\r\n\ @param\ room\ bisheriger\ Raum\r\n
comment16.params=pos
comment16.target=java.lang.Integer\ getRoomID(maths.Vector2i)
comment16.text=\r\n\ Gibt\ zur\u00FCck,\ ob,\ und\ in\ welchem\ Raum\ sich\ eine\ Tile\ befindet\r\n\ @param\ pos\ Position\ der\ Tile\ im\ Grid\r\n\ @return\ null,\ wenn\ die\ Tile\ in\ keinem\ Raum\ liegt,\ ansonsten\ ID\ des\ Raums\r\n
comment17.params=pos
comment17.target=int\ getTileValue(maths.Vector2i)
comment17.text=\r\n\ Gibt\ den\ Wert\ des\ Tile-Layers\ an\ einer\ gegebenen\ Position\ zur\u00FCck\r\n\ @param\ pos\ Position\ im\ Grid\r\n\ @return\ Wert\ des\ Tile-Layers\ an\ der\ Position,\ Tile.NONE\ f\u00FCr\ Out-of-Bounds-Werte\r\n
comment18.params=pos
comment18.target=int\ getFunctionValue(maths.Vector2i)
comment18.text=\r\n\ Gibt\ den\ Wert\ des\ Function-Layers\ an\ einer\ gegebenen\ Position\ zur\u00FCck\r\n\ @param\ pos\ Position\ im\ Grid\r\n\ @return\ Wert\ des\ Function-Layers\ an\ der\ Position,\ Tile.NONE\ f\u00FCr\ Out-of-Bounds-Werte\r\n
comment19.params=
comment19.target=maths.Vector3\ getPlayerSpawn()
comment19.text=\r\n\ Gibt\ den\ Spawnpunkt\ des\ Spielers\ zur\u00FCck\r\n\ @return\ Spawnpunkt\ des\ Spielers\ in\ der\ Map\r\n
comment2.params=deltaTime\ runTime\ cameraPosition
comment2.target=void\ update(double,\ double,\ maths.Vector3)
comment2.text=\r\n\ Updated\ die\ GridMap.\r\n\ Levels\ of\ Detail\ und\ Draw\ Order\ werden\ neu\ berechnet.\r\n\ @param\ deltaTime\ Deltazeit\ des\ Frames\ in\ Sekunden\r\n\ @param\ runTime\ Laufzeit\ des\ Programms\ in\ Sekunden\r\n\ @param\ cameraPosition\ Position\ der\ Kamera\ im\ World\ Space\r\n
comment20.params=
comment20.target=double\ getPlayerSpawnAngle()
comment20.text=\r\n\ Gibt\ die\ Startrotation\ des\ Spielers\ am\ Spawnpunkt\ zur\u00FCck\r\n\ @return\ Startrotation\ des\ Spielers\ in\ der\ Map\r\n
comment21.params=
comment21.target=int\ getRoomCount()
comment21.text=\r\n\ Gibt\ die\ Anzahl\ der\ registrierten\ R\u00E4ume\ zur\u00FCck\r\n\ @return\ Anzahl\ registrierter\ R\u00E4ume\r\n
comment22.params=
comment22.target=Player\ getPlayer()
comment22.text=\r\n\ Gibt\ eine\ Referenz\ zum\ Spieler\ zur\u00FCck,\ wenn\ diese\ zuvor\ gesetzt\ wurde\r\n\ @return\ Referenz\ zum\ Spieler,\ null,\ falls\ nicht\ gesetzt\r\n
comment23.params=player
comment23.target=void\ setPlayer(Player)
comment23.text=\r\n\ Setzt\ die\ Spielerreferenz\ der\ Map\r\n\ @param\ player\ Spieler\r\n
comment3.params=collider
comment3.target=void\ handleCollisions(physics.ICollider)
comment3.text=\r\n\ Verarbeitet\ die\ Kollisionen\ eines\ Colliders\ mit\ den\ Collidern\ der\ Map\r\n\ @param\ collider\ Collider,\ dessen\ Kollisionen\ verarbeitet\ werden\r\n
comment4.params=renderer\ camera
comment4.target=void\ draw(core.Renderer,\ core.Camera)
comment4.text=\r\n\ Zeichnet\ die\ Mapgeometrie\ mit\ einem\ gegebenen\ Renderer\ in\ das\ Sichtfeld\ einer\ gegebenen\ Kamera\r\n\ @param\ renderer\ zu\ nutzender\ Renderer\r\n\ @param\ camera\ zu\ benutzende\ Kamera\r\n
comment5.params=roomID\ completedRooms\ completedDoors\ renderer\ camera
comment5.target=void\ drawConnectedRooms(int,\ java.util.HashSet,\ java.util.HashSet,\ core.Renderer,\ core.Camera)
comment5.text=\r\n\ Zeichnet\ einen\ gegebenen\ Raum\ und\ alle\ damit\ verkn\u00FCpften\ R\u00E4ume\ und\ T\u00FCren\r\n\ @param\ roomID\ ID\ des\ Raums\ in\ der\ GridMap-Raumliste\r\n\ @param\ completedRooms\ HashSet\ der\ bereits\ gezeichneten\ RaumIDs\r\n\ @param\ completedDoors\ HashSet\ der\ bereits\ gezeichneten\ T\u00FCrpositionen\r\n\ @param\ renderer\ Renderer,\ der\ zum\ Zeichnen\ verwendet\ werden\ soll\r\n\ @param\ camera\ Kamera,\ in\ deren\ Sichtfeld\ gerendert\ werden\ soll\r\n
comment6.params=cameraPosition
comment6.target=void\ updateLOD(maths.Vector3)
comment6.text=\r\n\ Updated\ die\ Levels-of-Detail\ der\ Mapgeometrie\ im\ Verh\u00E4ltnis\ zu\ einem\ Bezugspunkt\r\n\ @param\ cameraPosition\ Position\ der\ Kamera,\ die\ als\ Bezugspunkt\ der\ LOD-Berechnung\ genutzt\ wird\r\n
comment7.params=roomID\ completedRooms\ completedDoors\ cameraPosition
comment7.target=void\ lodUpdateConnectedRooms(int,\ java.util.HashSet,\ java.util.HashSet,\ maths.Vector3)
comment7.text=\r\n\ Updated\ die\ Levels-of-Detail\ f\u00FCr\ einen\ gegebenen\ Raum\ und\ alle\ damit\ verkn\u00FCpften\ R\u00E4ume\ und\ T\u00FCren\r\n\ @param\ roomID\ ID\ des\ Raums\ in\ der\ GridMap-Raumliste\r\n\ @param\ completedRooms\ HashSet\ der\ bereits\ gezeichneten\ RaumIDs\r\n\ @param\ completedDoors\ HashSet\ der\ bereits\ gezeichneten\ T\u00FCrpositionen\r\n\ @param\ cameraPosition\ Position\ der\ Kamera,\ die\ als\ Bezugspunkt\ der\ LOD-Berechnung\ genutzt\ wird\r\n
comment8.params=cameraPosition
comment8.target=void\ reorderAroundCamera(maths.Vector3)
comment8.text=\r\n\ Sortiert\ die\ GameObjects,\ die\ Teil\ der\ Mapgeometrie\ sind,\ neu,\ sodass\ sie\ mit\ aufsteigender\ Distanz\ zur\ Kamera\ sortiert\ sind.\r\n\ Dies\ sorgt\ daf\u00FCr,\ dass\ das\ Flackern,\ das\ durch\ das\ Fehlen\ des\ Back\ Buffers\ entsteht,\ m\u00F6glichst\ entfernt\ von\ der\ Kamera\ stattfindet\ und\ somit\ weniger\ bemerkbar\ ist.\r\n\ @param\ cameraPosition\ Position\ der\ Kamera,\ im\ Bezug\ zu\ der\ die\ GameObjects\ sortiert\ werden\ sollen\r\n
comment9.params=obj1\ obj2
comment9.target=int\ compare(core.IGameObject,\ core.IGameObject)
numComments=24
