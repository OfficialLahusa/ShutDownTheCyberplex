#BlueJ class context
comment0.target=Renderer
comment0.text=\r\n\ Renderer,\ der\ auf\ Basis\ von\ Turtles\ zweidimensional\ und\ dreidimensional\ rendern\ kann\r\n\r\n\ @author\ Lasse\ Huber-Saffer,\ Sven\ Schreiber\r\n\ @version\ 01.01.2022\r\n
comment1.params=
comment1.target=Renderer()
comment1.text=\r\n\ Der\ leere\ explizite\ Konstruktor\ von\ Renderer.\r\n
comment10.params=p\ camPos\ camDir
comment10.target=boolean\ isPointInFrustum(maths.Vector3,\ maths.Vector3,\ maths.Vector3)
comment10.text=\r\n\ Gibt\ zur\u00FCck\ ob\ ein\ Punkt\ im\ Frustum\ der\ Kamera\ liegt\r\n\ @param\ p\ Punkt\r\n\ @param\ camPos\ Position\ der\ Kamera\ im\ Raum\r\n\ @param\ camDir\ Richtungsvektor\ der\ Kamera\r\n\ @return\ true,\ wenn\ Punkt\ innerhalb\ des\ Frustums\ liegt\r\n
comment11.params=a\ b\ camPos\ camDir
comment11.target=boolean\ isLineInFrustum(maths.Vector3,\ maths.Vector3,\ maths.Vector3,\ maths.Vector3)
comment11.text=\r\n\ Gibt\ zur\u00FCck\ ob\ eine\ Linie\ im\ Frustum\ der\ Kamera\ liegt\r\n\ @param\ a\ erster\ Punkt\ der\ Linie\r\n\ @param\ b\ zweiter\ Punkt\ der\ Linie\r\n\ @param\ camPos\ Position\ der\ Kamera\ im\ Raum\r\n\ @param\ camDir\ Richtungsvektor\ der\ Kamera\r\n\ @return\ true,\ wenn\ Linie\ innerhalb\ des\ Frustums\ liegt\r\n
comment12.params=a\ b\ color\ model\ camera\ ignoreViewMatrix
comment12.target=void\ drawLine3D(maths.Vector3,\ maths.Vector3,\ TurtleColor,\ maths.Matrix4,\ Camera,\ boolean)
comment12.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ color\ Farbe\r\n\ @param\ model\ Modelmatrix\ f\u00FCr\ die\ Punkte\ der\ Linie.\ Wenn\ null,\ wird\ nichts\ angewandt\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n\ @param\ ignoreViewMatrix\ wenn\ true,\ wird\ die\ ViewMatrix\ der\ Kamera\ nicht\ angewandt,\ was\ f\u00FCr\ ViewModels\ n\u00FCtzlich\ ist\r\n
comment13.params=health
comment13.target=void\ drawHealthbar(int)
comment13.text=\r\n\ Zeichnet\ die\ Lebensanzeige\ eines\ Spielers\r\n\ \r\n\ @param\ health\ Lebensanzahl\r\n
comment14.params=cornerOrigin\ pointA\ pointB\ numStripes\ color
comment14.target=void\ drawStripesAroundCorner2D(maths.Vector2,\ maths.Vector2,\ maths.Vector2,\ int,\ TurtleColor)
comment14.text=\r\n\ Zeichnet\ mehrere\ Schraffierungsstreifen\ in\ 2D\ um\ einen\ Eckpunkt\r\n\ @param\ cornerOrigin\ Eckpunkt\r\n\ @param\ pointA\ erster\ begrenzender\ Punkt\r\n\ @param\ pointB\ zweiter\ begrenzender\ Punkt\r\n\ @param\ numStripes\ Anzahl\ der\ Streifen\r\n\ @param\ color\ Farbe\r\n
comment15.params=cornerOrigin\ pointA\ pointB\ numStripes\ color\ camera
comment15.target=void\ drawStripesAroundCorner3D(maths.Vector3,\ maths.Vector3,\ maths.Vector3,\ int,\ TurtleColor,\ Camera)
comment15.text=\r\n\ Zeichnet\ mehrere\ Schraffierungsstreifen\ in\ 3D\ um\ einen\ Eckpunkt\r\n\ @param\ cornerOrigin\ Eckpunkt\r\n\ @param\ pointA\ erster\ begrenzender\ Punkt\r\n\ @param\ pointB\ zweiter\ begrenzender\ Punkt\r\n\ @param\ numStripes\ Anzahl\ der\ Streifen\r\n\ @param\ color\ Farbe\r\n
comment16.params=topLeft\ bottomLeft\ topRight\ bottomRight\ color
comment16.target=void\ drawQuad2D(maths.Vector2,\ maths.Vector2,\ maths.Vector2,\ maths.Vector2,\ TurtleColor)
comment16.text=\r\n\ Zeichnet\ ein\ Viereck\ in\ 2D\r\n\ @param\ topLeft\ oberer\ linker\ Punkt\r\n\ @param\ bottomLeft\ unterer\ linker\ Punkt\r\n\ @param\ topRight\ oberer\ rechter\ Punkt\r\n\ @param\ bottomRight\ unterer\ rechter\ Punkt\r\n\ @param\ color\ Farbe\r\n
comment17.params=topLeft\ bottomLeft\ topRight\ bottomRight\ color\ numDiagonals
comment17.target=void\ drawStripedQuad2D(maths.Vector2,\ maths.Vector2,\ maths.Vector2,\ maths.Vector2,\ TurtleColor,\ int)
comment17.text=\r\n\ Zeichnet\ ein\ gestreiftes\ Rechteck\ in\ 2D-Ansicht\r\n\ \r\n\ @param\ topLeft\ oberer\ linker\ Punkt\r\n\ @param\ bottomLeft\ unterer\ linker\ Punkt\r\n\ @param\ topRight\ oberer\ rechter\ Punkt\r\n\ @param\ bottomRight\ unterer\ rechter\ Punkt\r\n\ @param\ color\ Farbe\r\n\ @param\ numDiagonals\ Anzahl\ der\ diagonalen\ Streifen\r\n
comment18.params=topLeft\ bottomLeft\ topRight\ bottomRight\ color\ camera
comment18.target=void\ drawStripedQuad3D(maths.Vector3,\ maths.Vector3,\ maths.Vector3,\ maths.Vector3,\ TurtleColor,\ Camera)
comment18.text=\r\n\ Zeichnet\ ein\ gestreiftes\ Rechteck\ in\ 3D-Ansicht\r\n\ \r\n\ @param\ topLeft\ Der\ Punkt\ Oben-links\r\n\ @param\ bottomLeft\ Der\ Punkt\ Unten-links\r\n\ @param\ topRight\ Der\ Punkt\ Oben-rechts\r\n\ @param\ bottomRight\ Der\ Punkt\ Unten-rechts\r\n\ @param\ color\ Farbe\r\n\ @param\ camera\ die\ benutzte\ Camera\r\n
comment19.params=camera
comment19.target=void\ drawAxis(Camera)
comment19.text=\r\n\ Zeichnet\ aus\ dem\ Ursprung\ heraus\ Linien\ entlang\ jeder\ Achse\r\n\ @param\ camera\ benutze\ Kamera\r\n
comment2.params=meshRef\ modelMatrix\ color\ camera
comment2.target=void\ drawMesh(Mesh,\ maths.Matrix4,\ TurtleColor,\ Camera)
comment2.text=\r\n\ Zeichnet\ ein\ dreidimensionales\ Mesh\ aus\ Linien\ in\ einer\ gegebenen\ Farbe\ in\ das\ Sichtfeld\ einer\ Kamera.\r\n\ @param\ meshRef\ Referenz\ auf\ ein\ Mesh\r\n\ @param\ modelMatrix\ Model-Transformationsmatrix\ des\ Meshs\r\n\ @param\ color\ Farbe,\ in\ der\ das\ Mesh\ gezeichnet\ werden\ soll\r\n\ @param\ camera\ Kamera,\ in\ dessen\ Sichtfeld\ das\ Mesh\ gerendert\ werden\ soll\r\n
comment20.params=
comment20.target=void\ clear()
comment20.text=\r\n\ Leert\ das\ Bild\r\n
comment21.params=r\ g\ b
comment21.target=void\ clear(int,\ int,\ int)
comment21.text=\r\n\ Leert\ das\ Bild\ und\ f\u00E4rbt\ es\ in\ einer\ bestimmten\ Farbe\r\n\ @param\ r\ Rotkanal\ der\ Farbe\ [0,\ 255]\r\n\ @param\ g\ Gr\u00FCnkanal\ der\ Farbe\ [0,\ 255]\r\n\ @param\ b\ Blaukanal\ der\ Farbe\ [0,\ 255]\r\n
comment22.params=color
comment22.target=java.lang.String\ colorToString(TurtleColor)
comment22.text=\r\n\ Gibt\ den\ deutschen\ Namen\ einer\ gegebenen\ Turtle-Farbe\ zur\u00FCck\r\n\ @param\ color\ Turtle-Farbe\r\n\ @return\ deutscher\ Name\ der\ Farbe\ (Bsp.\:\ TurtleColor.RED\ ->\ "rot")\r\n
comment3.params=meshRef\ modelMatrix\ color\ camera\ ignoreViewMatrix
comment3.target=void\ drawMesh(Mesh,\ maths.Matrix4,\ TurtleColor,\ Camera,\ boolean)
comment3.text=\r\n\ Zeichnet\ ein\ dreidimensionales\ Mesh\ aus\ Linien\ in\ einer\ gegebenen\ Farbe\ in\ das\ Sichtfeld\ einer\ Kamera.\r\n\ Optional\ kann\ die\ ViewMatrix\ der\ Kamera\ ignoriert\ werden,\ um\ ein\ Mesh\ als\ 1st\ Person\ ViewModel\ zu\ rendern.\r\n\ @param\ meshRef\ Referenz\ auf\ ein\ Mesh\r\n\ @param\ modelMatrix\ Model-Transformationsmatrix\ des\ Meshs\r\n\ @param\ color\ Farbe,\ in\ der\ das\ Mesh\ gezeichnet\ werden\ soll\r\n\ @param\ camera\ Kamera,\ in\ dessen\ Sichtfeld\ das\ Mesh\ gerendert\ werden\ soll\r\n\ @param\ ignoreViewMatrix\ wenn\ true,\ wird\ die\ ViewMatrix\ der\ Kamera\ nicht\ angewandt,\ was\ f\u00FCr\ ViewModels\ n\u00FCtzlich\ ist\r\n
comment4.params=a\ b
comment4.target=void\ drawLine(maths.Vector2,\ maths.Vector2)
comment4.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n
comment5.params=a\ b\ color
comment5.target=void\ drawLine(maths.Vector2,\ maths.Vector2,\ TurtleColor)
comment5.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ color\ Farbe\r\n
comment6.params=length\ distance\ color
comment6.target=void\ drawCrosshair(double,\ double,\ TurtleColor)
comment6.text=\r\n\ Zeichnet\ ein\ Crosshair\ (Zielhilfe)\ auf\ den\ Bildschirm\r\n\ @param\ length\ L\u00E4nge\ der\ einzelnen\ Linien\ des\ Crosshairs\r\n\ @param\ distance\ Abstand\ der\ Linien\ zum\ Mittelpunkt\r\n\ @param\ color\ Farbe\ des\ Crosshairs\r\n
comment7.params=a\ b\ camera
comment7.target=void\ drawLine3D(maths.Vector3,\ maths.Vector3,\ Camera)
comment7.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment8.params=a\ b\ color\ camera
comment8.target=void\ drawLine3D(maths.Vector3,\ maths.Vector3,\ TurtleColor,\ Camera)
comment8.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ color\ Farbe\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment9.params=lineP1\ lineP2\ planeP1\ planeNormal
comment9.target=maths.Vector3\ getLinePlaneIntersection(maths.Vector3,\ maths.Vector3,\ maths.Vector3,\ maths.Vector3)
comment9.text=\r\n\ Gibt\ den\ Schnittpunkt\ einer\ Strecke\ mit\ einer\ Ebene\ zur\u00FCck\r\n\ @param\ lineP1\ erster\ Punkt\ der\ Linie\r\n\ @param\ lineP2\ zweiter\ Punkt\ der\ Linie\r\n\ @param\ planeP1\ Ortsvektor\ der\ Ebene\r\n\ @param\ planeNormal\ Normalenvektor\ der\ Ebene\r\n\ @return\ null,\ wenn\ es\ keinen\ Schnittpunkt\ gibt,\ ansonsten\ den\ Schnittpunkt\r\n
numComments=23
