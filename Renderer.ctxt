#BlueJ class context
comment0.target=Renderer
comment0.text=\r\n\ Render\ Engine,\ die\ auf\ Basis\ von\ Turtles\ zweidimensional\ und\ dreidimensional\ rendern\ kann\r\n\r\n\ @author\ Lasse\ Huber-Saffer\r\n\ @version\ 30.\ November\ 2021\r\n
comment1.params=
comment1.target=Renderer()
comment1.text=\r\n\ Der\ leere\ explizite\ Konstruktor\ von\ Renderer.\r\n
comment10.params=a\ b\ farbe\ model\ camera
comment10.target=void\ drawLine3D(Vector3,\ Vector3,\ java.lang.String,\ Matrix4,\ Camera)
comment10.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n\ @param\ model\ Modelmatrix\ f\u00FCr\ die\ Punkte\ der\ Linie\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment11.params=cornerOrigin\ pointA\ pointB\ numStripes\ farbe\ camera
comment11.target=void\ drawStripesAroundCorner(Vector3,\ Vector3,\ Vector3,\ int,\ java.lang.String,\ Camera)
comment12.params=topLeft\ bottomLeft\ topRight\ bottomRight\ farbe\ camera
comment12.target=void\ drawStripedQuad(Vector3,\ Vector3,\ Vector3,\ Vector3,\ java.lang.String,\ Camera)
comment12.text=\r\n\ Zeichnet\ ein\ gestreiftes\ Rechteck\r\n\ \r\n\ @param\ topLeft\ Der\ Punkt\ Oben-links\r\n\ @param\ bottomLeft\ Der\ Punkt\ Unten-links\r\n\ @param\ topRight\ Der\ Punkt\ Oben-rechts\r\n\ @param\ bottomRight\ Der\ Punkt\ Unten-rechts\r\n\ @param\ farbe\ Die\ gew\u00FCnschte\ Farb\r\n
comment13.params=camera
comment13.target=void\ drawAxis(Camera)
comment14.params=
comment14.target=void\ clear()
comment15.params=r\ g\ b
comment15.target=void\ fill(int,\ int,\ int)
comment2.params=meshRef\ modelMatrix\ farbe\ camera
comment2.target=void\ drawMesh(Mesh,\ Matrix4,\ java.lang.String,\ Camera)
comment3.params=a\ b
comment3.target=void\ drawLine(Vector2,\ Vector2)
comment3.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n
comment4.params=a\ b\ farbe
comment4.target=void\ drawLine(Vector2,\ Vector2,\ java.lang.String)
comment4.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n
comment5.params=a\ b\ camera
comment5.target=void\ drawLine3D(Vector3,\ Vector3,\ Camera)
comment5.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment6.params=lineP1\ lineP2\ planeP1\ planeNormal
comment6.target=Vector3\ getLinePlaneIntersection(Vector3,\ Vector3,\ Vector3,\ Vector3)
comment7.params=p\ camera
comment7.target=boolean\ isPointInFrustum(Vector3,\ Camera)
comment8.params=a\ b\ camera
comment8.target=boolean\ isLineInFrustum(Vector3,\ Vector3,\ Camera)
comment9.params=a\ b\ farbe\ camera
comment9.target=void\ drawLine3D(Vector3,\ Vector3,\ java.lang.String,\ Camera)
comment9.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
numComments=16
