#BlueJ class context
comment0.target=Renderer
comment0.text=\r\n\ Render\ Engine,\ die\ auf\ Basis\ von\ Turtles\ zweidimensional\ und\ dreidimensional\ rendern\ kann\r\n\r\n\ @author\ Lasse\ Huber-Saffer\r\n\ @version\ 30.\ November\ 2021\r\n
comment1.params=
comment1.target=Renderer()
comment1.text=\r\n\ Der\ leere\ explizite\ Konstruktor\ von\ Renderer.\r\n
comment10.params=a\ b\ camera
comment10.target=boolean\ isLineInFrustum(Vector3,\ Vector3,\ Camera)
comment11.params=a\ b\ farbe\ model\ camera\ ignoreViewMatrix
comment11.target=void\ drawLine3D(Vector3,\ Vector3,\ java.lang.String,\ Matrix4,\ Camera,\ boolean)
comment11.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n\ @param\ model\ Modelmatrix\ f\u00FCr\ die\ Punkte\ der\ Linie.\ Wenn\ null,\ wird\ nichts\ angewandt\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n\ @param\ ignoreViewMatrix\ wenn\ true,\ wird\ die\ ViewMatrix\ der\ Kamera\ nicht\ angewandt,\ was\ f\u00FCr\ ViewModels\ n\u00FCtzlich\ ist\r\n
comment12.params=cornerOrigin\ pointA\ pointB\ numStripes\ farbe\ camera
comment12.target=void\ drawStripesAroundCorner(Vector3,\ Vector3,\ Vector3,\ int,\ java.lang.String,\ Camera)
comment13.params=topLeft\ bottomLeft\ topRight\ bottomRight\ farbe\ camera
comment13.target=void\ drawStripedQuad(Vector3,\ Vector3,\ Vector3,\ Vector3,\ java.lang.String,\ Camera)
comment13.text=\r\n\ Zeichnet\ ein\ gestreiftes\ Rechteck\r\n\ \r\n\ @param\ topLeft\ Der\ Punkt\ Oben-links\r\n\ @param\ bottomLeft\ Der\ Punkt\ Unten-links\r\n\ @param\ topRight\ Der\ Punkt\ Oben-rechts\r\n\ @param\ bottomRight\ Der\ Punkt\ Unten-rechts\r\n\ @param\ farbe\ Die\ gew\u00FCnschte\ Farb\r\n
comment14.params=camera
comment14.target=void\ drawAxis(Camera)
comment15.params=
comment15.target=void\ clear()
comment16.params=r\ g\ b
comment16.target=void\ clear(int,\ int,\ int)
comment2.params=meshRef\ modelMatrix\ farbe\ camera
comment2.target=void\ drawMesh(Mesh,\ Matrix4,\ java.lang.String,\ Camera)
comment2.text=\r\n\ Zeichnet\ ein\ dreidimensionales\ Mesh\ aus\ Linien\ in\ einer\ gegebenen\ Farbe\ in\ das\ Sichtfeld\ einer\ Kamera.\r\n\ @param\ meshRef\ Referenz\ auf\ ein\ Mesh\r\n\ @param\ modelMatrix\ Model-Transformationsmatrix\ des\ Meshs\r\n\ @param\ farbe\ Farbe,\ in\ der\ das\ Mesh\ gezeichnet\ werden\ soll\r\n\ @param\ camera\ Kamera,\ in\ dessen\ Sichtfeld\ das\ Mesh\ gerendert\ werden\ soll\r\n
comment3.params=meshRef\ modelMatrix\ farbe\ camera\ ignoreViewMatrix
comment3.target=void\ drawMesh(Mesh,\ Matrix4,\ java.lang.String,\ Camera,\ boolean)
comment3.text=\r\n\ Zeichnet\ ein\ dreidimensionales\ Mesh\ aus\ Linien\ in\ einer\ gegebenen\ Farbe\ in\ das\ Sichtfeld\ einer\ Kamera.\r\n\ Optional\ kann\ die\ ViewMatrix\ der\ Kamera\ ignoriert\ werden,\ um\ ein\ Mesh\ als\ 1st\ Person\ ViewModel\ zu\ rendern.\r\n\ @param\ meshRef\ Referenz\ auf\ ein\ Mesh\r\n\ @param\ modelMatrix\ Model-Transformationsmatrix\ des\ Meshs\r\n\ @param\ farbe\ Farbe,\ in\ der\ das\ Mesh\ gezeichnet\ werden\ soll\r\n\ @param\ camera\ Kamera,\ in\ dessen\ Sichtfeld\ das\ Mesh\ gerendert\ werden\ soll\r\n\ @param\ ignoreViewMatrix\ wenn\ true,\ wird\ die\ ViewMatrix\ der\ Kamera\ nicht\ angewandt,\ was\ f\u00FCr\ ViewModels\ n\u00FCtzlich\ ist\r\n
comment4.params=a\ b
comment4.target=void\ drawLine(Vector2,\ Vector2)
comment4.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n
comment5.params=a\ b\ farbe
comment5.target=void\ drawLine(Vector2,\ Vector2,\ java.lang.String)
comment5.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ zweidimensionalen\ Screenspace\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n
comment6.params=a\ b\ camera
comment6.target=void\ drawLine3D(Vector3,\ Vector3,\ Camera)
comment6.text=\r\n\ Zeichnet\ eine\ rote\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment7.params=a\ b\ farbe\ camera
comment7.target=void\ drawLine3D(Vector3,\ Vector3,\ java.lang.String,\ Camera)
comment7.text=\r\n\ Zeichnet\ eine\ beliebigfarbige\ Linie\ zwischen\ zwei\ Punkten\ im\ dreidimensionalen\ Raum\r\n\ @param\ a\ Startpunkt\r\n\ @param\ b\ Endpunkt\r\n\ @param\ farbe\ deutscher\ ausgeschriebener\ Name\ von\ einer\ der\ 13\ validen\ Farben\ (siehe\ Turtle)\r\n\ @param\ camera\ Kamera\ f\u00FCr\ die\ dreidimensionale\ Projektion\r\n
comment8.params=lineP1\ lineP2\ planeP1\ planeNormal
comment8.target=Vector3\ getLinePlaneIntersection(Vector3,\ Vector3,\ Vector3,\ Vector3)
comment9.params=p\ camera
comment9.target=boolean\ isPointInFrustum(Vector3,\ Camera)
numComments=17
